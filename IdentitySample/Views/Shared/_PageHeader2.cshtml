@model IdentitySample.ViewModels.Common.IViewModel
@using IdentitySample.Helpers;
@using IdentitySample.Resx;

<ul class="breadcrumb">
    @{
        int item_number = 0;
        foreach (var item in Model.GetBreadCrumbs() )
        {
            if (item_number == Model.GetBreadCrumbs().Count() - 1)
            {
                if (item.Routes.Count() > 1)
                {
                    <li role="presentation" class="dropdown">
                        <a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-expanded="false">
                            @item.Name <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu">
                            @foreach (var subitem in item.Routes.OrderBy(x => x.Value))
                            {
                                <li role="presentation" class=@Html.IsActive(subitem.Key.ToString(), item.Id.ToString())>@Html.ActionLink(subitem.Value, "Details", @item.Controller, new { id = subitem.Key }, null)</li>
                            }
                        </ul>
                    </li>
                }
                else
                {
                    <li>@item.Name</li>
                }
            }
            else
            {
                <li role="presentation">
                    @Html.ActionLink(item.Name, item.Action, item.Controller, new { id = item.Id }, null)
                </li>
            }
            item_number += 1;
        }
    }
</ul>

<h2>@Model.Title <small>@Model.Subtitle</small></h2>
@if (@Model.GetDescription().Count > 0 || @Model.GetButtons().Count > 0)
{
    <div class="well">
        @foreach (string desc in Model.GetDescription())
        {
            <h5>@Html.Raw(@desc)</h5>
        }

        @if (Model.GetButtons().Count == 1)
        {
            if (Model.GetButtons()[0].Id == 0)
            {
                @Html.ActionLink(Model.GetButtons()[0].Caption, Model.GetButtons()[0].Action, Model.GetButtons()[0].Controller, null, new { @class = "btn btn-success", @target = Model.GetButtons()[0].Target })
            }
            else
            {
                @Html.ActionLink(Model.GetButtons()[0].Caption, Model.GetButtons()[0].Action, Model.GetButtons()[0].Controller, new { id = Model.GetButtons()[0].Id }, new { @class = "btn btn-success", @target = Model.GetButtons()[0].Target })
            }
        }
        else if (Model.GetButtons().Count > 1)
        {
            <div class="btn-group">
                <a href="#" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    @AppResource.DropDownButton
                    <span class="caret"></span>
                </a>
                <ul class="dropdown-menu" role="menu">
                    @foreach (IdentitySample.ViewModels.Helpers.Button button in Model.GetButtons())
                    {
                        if (button.Target == "devider")
                        {
                            <li role="presentation" class="divider"></li>
                        }
                        else if (button.Target == "dropdown-header")
                        {
                            <li role="presentation" class="dropdown-header">@button.Caption</li>
                        }
                        else if (button.Target == "ajax")
                        {
                            <li role="presentation">
                                @Ajax.ActionLink(button.Caption, button.Action, new AjaxOptions()
            {
                InsertionMode = InsertionMode.Replace,
                HttpMethod = "get",
                UpdateTargetId = "UpdatedTable",
                OnBegin = "OnBegin()",
                OnComplete = "OnComplete()",
                Url = Url.Action(button.Action, button.Controller, new { id = button.Id })
            })
                            </li>
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(button.Type))
                            {
                                <li role="presentation">
                                    @Html.ActionLink(button.Caption, button.Action, button.Controller, new { id = button.Id, type = button.Type }, new { @target = button.Target })
                                </li>
                            }
                            else
                            {
                                <li role="presentation">
                                    @Html.ActionLink(button.Caption, button.Action, button.Controller, new { id = button.Id }, new { @target = button.Target })
                                </li>
                            }
                        }
                    }
                </ul>
            </div>
        }
    </div>
}

<div id="UpdatedTable">
    <div id="loading" class="hidden">
        <i class="fa fa-refresh fa-spin"></i>
        @*<img src="~/Images/loader.gif" alt="Loading" height="20" />*@
    </div>
    <ul class="nav nav-pills">
        @foreach (var item in Model.GetTabs() )
        {
            <li role="presentation" class="@Html.IsActive(item.IsActive())">
                @Ajax.ActionLink(item.GetCaption(), "item.RouteValues[action].ToString()", new AjaxOptions()
           {
               InsertionMode = InsertionMode.Replace,
               HttpMethod = "get",
               UpdateTargetId = "UpdatedTable",
               OnBegin = "OnBegin()",
              OnComplete = ("item.ActionName" == "GetMap" ? "OnCompleteMap()" : "OnComplete()"),
               Url = "#"//Url.Action(item.RouteValues["action"].ToString(), item.RouteValues)
           })
            </li>
        }
    </ul>

    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            @Html.Partial(Model.GetTabs().Where(x => x.IsActive()).Single().ActionName, Model)
            @*@Html.Partial("_TableFooter2", Model)*@
        </table>
                    @*@Html.Partial(Model.GetTabs().Where(x => x.IsActive).Single().ActionName, Model.GetTabs().Where(x => x.IsActive).Single().delData(1))*@
                    @*@Html.Action(Model.GetTabs().Where(x => x.IsActive).Single().ActionName, new { group = Model.GetTabs().Where(x => x.IsActive).Single().GroupName })*@
    </div>

</div>

