@model IdentitySample.Models.TableViewModel<IdentitySample.Models.RoleViewModel>
@using IdentitySample.Helpers;
@using IdentitySample.Entities;
@using IdentitySample.Resx;
@using PagedList.Mvc

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.TableData[0].Name)
            </th>
            <th>

            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.TableData)
        {
            <tr>
                <td>
                    @Html.ActionLink(item.Name, "Details", Model.ChildController, new { id = item.Id }, null)
                </td>
                <td>
                    @Html.ActionLink(AppResource.Edit, "Edit", Model.ChildController, new { id = item.Id }, null) |
                    @Html.ActionLink(AppResource.Delete, "Delete", Model.ChildController, new { id = item.Id }, null)
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="2">
                @string.Format(IdentitySample.Resx.AppResource.TotalPaging, @Model.TableData.PageNumber, @Model.TableData.PageCount, @Model.TableData.TotalItemCount)

                @Html.PagedListPager(Model.TableData, page => Url.Action(ViewContext.RouteData.Values["id"] == null ? "Index" : "Details", ViewContext.RouteData.Values["id"] == null ? Model.Active : Model.Controller, new
{
    page,
    id = ViewContext.RouteData.Values["id"] == null ? "0" : ViewContext.RouteData.Values["id"].ToString(),
    active = Model.Active,
    search = ViewData["search"]
}),
    PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new AjaxOptions()
    {
        HttpMethod = "GET",
        UpdateTargetId = "UpdatedTable",
        OnSuccess = "countdownUpdate"
    }))
            </td>
        </tr>
    </tfoot>
</table>

