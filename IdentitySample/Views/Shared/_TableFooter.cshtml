@model IdentitySample.Models.TableViewModel<IdentitySample.Entities.Entity<int>>
@using PagedList.Mvc
@using IdentitySample.Resx

<ul class="nav nav-pills pull-right">
    @for (int i = 1; i < 5; i++)
    {
        <li class="@(i * 5 == Model.TableData.PageSize ? "active" : "")">
            @if (ViewContext.RouteData.Values["id"] == null)
            {
                @Ajax.ActionLink((i * 5).ToString(), "Index", new AjaxOptions()
        {
            InsertionMode = InsertionMode.Replace,
            HttpMethod = "get",
            UpdateTargetId = "UpdatedTable",
            OnBegin = "OnBegin()",
            OnComplete = "OnComplete()",
            Url = Url.Action("Index", new { records = i * 5, active = @Model.Active })
        })
            }
            else
            {
                @Ajax.ActionLink((i * 5).ToString(), "Details", new { id = ViewContext.RouteData.Values["id"] }, new AjaxOptions()
        {
            InsertionMode = InsertionMode.Replace,
            HttpMethod = "get",
            UpdateTargetId = "UpdatedTable",
            OnBegin = "OnBegin()",
            OnComplete = "OnComplete()",
            Url = Url.Action("Details", new { records = i * 5, id = ViewContext.RouteData.Values["id"], active = @Model.Active })
        })
            }
        </li>
    }
</ul>


<span class="text-muted small">
    @string.Format(IdentitySample.Resx.AppResource.TotalPaging, @Model.TableData.PageNumber, @Model.TableData.PageCount, @Model.TableData.TotalItemCount)
</span>

@{
    PagedListRenderOptions options = PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new PagedListRenderOptions()
    {
        LinkToNextPageFormat = AppResource.Next,
        LinkToPreviousPageFormat = AppResource.Previous,
        DisplayLinkToFirstPage = PagedListDisplayMode.Never,
        DisplayLinkToLastPage = PagedListDisplayMode.Never,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        UlElementClasses = new[] { "pager" },
        DisplayLinkToIndividualPages = false
    }, new AjaxOptions()
    {
        HttpMethod = "GET",
        UpdateTargetId = "UpdatedTable",
        OnSuccess = "OnComplete()",
    });

    if (ViewContext.RouteData.Values["id"] == null)
    {
        @Html.PagedListPager(Model.TableData, page => Url.Action("Index", Model.Controller, new
        {
            page,
            active = Model.Active,
            search = ViewData["search"]
        }), options);
    }
    else
    {
        @Html.PagedListPager(Model.TableData, page => Url.Action("Details", Model.Controller, new
        {
            page,
            id = ViewContext.RouteData.Values["id"],
            active = Model.Active,
            search = ViewData["search"]
        }), options)
    }
}

