
using IdentitySample.Entities;
using IdentitySample.Models;
using IdentitySample.Resx;
using IdentitySample.Service;
using PagedList;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web.Hosting;
using System.Web.Mvc;

namespace IdentitySample.Helpers
{
    public static class HtmlHelpers
    {
        public static string IsActive(this HtmlHelper htmlHelper, string controller, string action)
        {
            //var routeData = htmlHelper.ViewContext.RouteData;
            //var routeAction = routeData.Values["action"].ToString();
            //var routeController = routeData.Values["controller"].ToString();
            //var returnActive = (controller == routeController && action == routeAction);
            //return returnActive ? "active" : "";
            return (controller == action) ? "active" : "";
        }

        public static string IsActive(this HtmlHelper htmlHelper, bool isActive)
        {
            return (isActive) ? "active" : "";
        }

        public static TableViewModel<Entity<int>> ConvertToPageFoter<T>
            (this HtmlHelper htmlHelper, TableViewModel<T> tableData)
        {
            var viewModel = new TableViewModel<Entity<int>>()
            {
                Active = tableData.Active,
                TableData = (IPagedList<Entity<int>>)tableData.TableData,
                Controller = tableData.Controller
            };
            return viewModel;
        }

        public static string Translate(this HtmlHelper htmlHelper, Unit unit)
        {
            return unit.Translate();
        }

        public static string GetDisplayName(this Enum value)
        {
            var type = value.GetType();
            if (!type.IsEnum) throw new ArgumentException(String.Format("Type '{0}' is not Enum", type));

            var members = type.GetMember(value.ToString());
            if (members.Length == 0) throw new ArgumentException(String.Format("Member '{0}' not found in type '{1}'", value, type.Name));

            var member = members[0];
            var attributes = member.GetCustomAttributes(typeof(DisplayAttribute), false);
            if (attributes.Length == 0) throw new ArgumentException(String.Format("'{0}.{1}' doesn't have DisplayAttribute", type.Name, value));

            var attribute = (DisplayAttribute)attributes[0];
            return attribute.GetName();
        }

        public static string GetFullName(this HtmlHelper htmlHelper, string userName)
        {
            return userName.GetFullName();
        }

        public static string GetFullName (this string userName)
        {
            var db = new ApplicationDbContext();
            var user = db.Users.Where(x => x.UserName.Equals(userName)).SingleOrDefault();
            if (user != null)
            {
                return user.FullName;
            }
            return userName;
        }
    }

    public static class ExtensionMethods
    {
        /// <summary>
        /// The SelectListItem to use by default as the placeholder for any select lists generated by these extension methods.
        /// </summary>
        public static readonly SelectListItem DefaultEmptySelectListItem = new SelectListItem() { Text = String.Format("-- {0} --", AppResource.SelectItem), Value = "" };

        #region String Keys
        /// <summary>
        /// Returns a collection of SelectListItem for each of the items in the collection passed in.
        /// </summary>
        /// <example>
        /// people.ToSelectList(x => x.PersonId, x => x.Name);
        /// </example>
        /// <param name="key">The property to use as the value attribute of each list item.</param>
        /// <param name="text">The property to use as the text attribute of each list item.</param>
        public static IList<SelectListItem> ToSelectList<TType, TKey>(this IEnumerable<TType> enumerable, Func<TType, TKey> key, Func<TType, string> text) where TType : class
        {
            return ToSelectList(enumerable, key, text, null, true);
        }

        public static IList<SelectListItem> ToSelectList<TType, TKey>(this IEnumerable<TType> enumerable, Func<TType, TKey> key, Func<TType, Unit> item) where TType : class
        {
            return ToSelectList(enumerable, key, item, null, DefaultEmptySelectListItem);
        }

        /// <summary>
        /// Returns a collection of SelectListItem for each of the items in the collection passed in, with a specific list item selected and optionally an empty list item.
        /// </summary>
        /// <example>
        /// <code>
        /// people.ToSelectList(x => x.PersonId, x => x.Name, "2345");
        /// // or
        /// people.ToSelectList(x => x.PersonId, x => x.Name, "2345", false); if you don't want the empty list item
        /// </code>
        /// </example>
        /// <param name="key">The property to use as the value attribute of each list item.</param>
        /// <param name="text">The property to use as the text attribute of each list item.</param>
        /// <param name="currentKey">The String value of the list item that should be selected by default.</param>
        /// <param name="includeEmptyListItem">Whether or not a default list item should be the first list item before those from the collection.</param>
        public static IList<SelectListItem> ToSelectList<TType, TKey>(this IEnumerable<TType> enumerable, Func<TType, TKey> key, Func<TType, string> text, TKey currentKey, bool includeEmptyListItem = true) where TType : class
        {
            return ToSelectList(enumerable, key, text, currentKey, includeEmptyListItem ? DefaultEmptySelectListItem : null);
        }

        /// <summary>
        /// Returns a collection of SelectListItem for each of the items in the collection passed in, with a specific list item selected and a custom empty list item.
        /// </summary>
        /// <example>
        /// <code>
        /// people.ToSelectList(x => x.PersonId, x => x.Name, "2345", new SelectListItem() {Text = "-- Pick One --", Value = ""});
        /// </code>
        /// </example>
        /// <param name="key">The property to use as the value attribute of each list item.</param>
        /// <param name="text">The property to use as the text attribute of each list item.</param>
        /// <param name="currentKey">The String value of the list item that should be selected by default.</param>
        /// <param name="emptyListItem">The list item to use as the first list item before those from the collection.</param>
        public static IList<SelectListItem> ToSelectList<TType, TKey>(this IEnumerable<TType> enumerable, Func<TType, TKey> key, Func<TType, string> text, TKey currentKey, SelectListItem emptyListItem) where TType : class
        {
            return ToSelectList(enumerable, key, text, new TKey[] { currentKey }, emptyListItem);
        }

        public static IList<SelectListItem> ToSelectList<TType, TKey>(this IEnumerable<TType> enumerable, Func<TType, TKey> key, Func<TType, string> text, IEnumerable<TKey> currentKeys, bool includeEmptyListItem = true) where TType : class
        {
            return ToSelectList(enumerable, key, text, currentKeys, includeEmptyListItem ? DefaultEmptySelectListItem : null);
        }

        public static IList<SelectListItem> ToSelectList<TType, TKey>(this IEnumerable<TType> enumerable, Func<TType, TKey> key, Func<TType, string> text, IEnumerable<TKey> currentKeys, SelectListItem emptyListItem) where TType : class
        {
            var selectList = new List<SelectListItem>();
            if (enumerable != null)
                selectList = enumerable.Select(x => new SelectListItem() { Value = key.Invoke(x).ToString(), Text = text.Invoke(x), Selected = (currentKeys != null && currentKeys.Contains(key.Invoke(x))) }).ToList();
            if (emptyListItem != null)
                selectList.Insert(0, emptyListItem);
            return selectList;
        }

        public static IList<SelectListItem> ToSelectList<TType, TKey>(this IEnumerable<TType> enumerable, Func<TType, TKey> key, Func<TType, Unit> item, IEnumerable<TKey> currentKeys, SelectListItem emptyListItem) where TType : class
        {
            var selectList = new List<SelectListItem>();
            if (enumerable != null)
                selectList = enumerable.Select(x => new SelectListItem() { Value = item.Invoke(x).Id.ToString(), Text = item.Invoke(x).Translate(), Selected = (currentKeys != null && currentKeys.Contains(key.Invoke(x))) }).ToList();
            if (emptyListItem != null)
                selectList.Insert(0, emptyListItem);
            return selectList;
        }
        #endregion

        public static string Translate(this Unit unit)
        {
            var userLanguage = CultureInfo.CurrentUICulture;
            Language lan;
            try
            {
                lan = (Language)Enum.Parse(typeof(Language), userLanguage.TwoLetterISOLanguageName);
                var translation = unit.Translations.Where(x => x.Language == lan).SingleOrDefault();
                if (translation != null)
                {
                    return translation.Name;
                }
            }
            catch (Exception)
            {
                return unit.Name;
            }
            return unit.Name;
        }
    }
}